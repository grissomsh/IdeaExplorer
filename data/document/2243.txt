OnRack real-time monitoring, correlation and self-remediation solution for large scale emulated and physical hardware environment
Improve efficiency for onrack development and testing when work with large scale emulated Hardware and Physical enviornment 
When we are working on Hardware simulation project for OnRack large scale testing , our QAs in SH and Hopkinton deployed hundreds emulated nodes under testing , we  find some issues with Onrack discovery(manually) and also have difficulty to report issues with more neccessary details back to developers so it cause many efforts for OnRack developers to root cause  so we propose ELK(elasticsearch+logstash+kibana) stack and implemented this . Currently it is already used (some function) in Shanghai HW simulation project for onrack large scale testing  and working with OnRack development team in MN to setup this as well in development environment  ,we continue develop more functionalities
Joel heck also provides some user case/request for this solution
Our solution leverages  open source ELK stack(elasticSearch+Logstash+Kibana) for log process,index,search engine and real time data visualization  .  We setup ELK stack in one centralized server then you can register your Onrack instance then
1 a)logstash will process onrack logs for example on-taskgraph.log under /var/log/upstart in onrack instance to caculate Onrack discovery duration (from compute node is power on to catalog is done) 
   b)Logstash also receive input from collectd (https://collectd.org/) which is a tool running in onrack instance to collect system metrics like CPU utilization/Disk capacity and IO throughput/Memory(free,used,cached,buffered)/network IO throughout 
   c) In emulated hardware enviroment , each ESXI to host tens virtual compute nodes . so it is also important to understand if we are overwhelming the physical resources (the network bandwidth, the disk IO, etc) for the ESXi hosts . We can do the same to collect system metrics for ESXi host
2 Once the log and system metrics is collected and processed , they will be sent into eleasticsearch server for index then store indexing logs. Meanwhile we can perform real time pattern matching or error detection then can detect any "known" patterns which can be treated as anomaly.  Through this way we can build a complex event processing engine for events collected across different logs/sources. Storing data in elasticSearch engine will enable us to perform queries like faceted search , slicing and dicing data ,aggregation and time range queries.
3 Finally we can visualize and explore data  ,see snapshot (https://inside.emc.com/docs/DOC-154774) from real data when we deploy 400 virtual compute nodes  and one physical compute node ,the first pic  shows real time OnRack compute node(virtual/physical) discovery duration from power on to catalog is done)the second pic shows With time elapsing,virtual/physical compute nodes are discoveryed 
https://inside.emc.com/docs/DOC-155417 and https://inside.emc.com/docs/DOC-155418  shows OnRack instance system metrics (cpu/memory/network/disk)while under testing 

We also have overall infrastructure for our solution,please see slides https://inside.emc.com/docs/DOC-154773
If it is fully implemented ,  it can provide real time performance reporting as well as some system metric etc for developers and QA in OnRack team to significantly improve efficiency ,also  developers just need to dial into central server to search/analyze/visualize logs data instead  ssh into each onrack instances to cat/grep/tail log files to analyze MB/GB size of log files . Last one is that we can proactively receive warnings/alert/instructions to address Onrack SW issues through correlating many events/logs from onrack
