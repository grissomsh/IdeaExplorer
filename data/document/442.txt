Adoption symbolic execution tools to autogenerate unit test data, find race conditions and verify software into current software test processes across EMC
Such approach focuses on improving code quality and reduces time fo manual test data generation. These can enhance services quality, reduce product time to market and improve customer experience by reducing cases users will face to software issues.
Copule of years ago I have some contract task to verify usual linux software against beetles for state security certification. During searching for the robust testing approach I found symbolic execution theme and some corresponded tools for Java (Java PathFinder framework) and LLVM-Clang-compileable languages (primarily C and C++) (KLEE tool). Such tools allow to thorough check software on low level, find race conditions and generate unit test data samples. Now I want to adopt these tools and techiques EMC-widely and perhaps develop special framework for all EMC SW developers to verify their products.
My solution is to pickup some Java, C and C++ projects on first step. Adopt KLEE and Java PathFinder tools to check these projects' code bases and in positive case (project teams find usage such tools useful) spread such approach EMC-wide by developing appropriate framework for all developers.
Simultaneously we can significantly improve code quality on low levels by developing more thorough test cases, preventing race conditions and unevident defects and enhance functional testing because dev/test engineers will be able to spend some more time focusing on higher level requirements. 
