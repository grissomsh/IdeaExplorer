Using smart Log signature analysis to proactively identify and fix field issues
Improving Customer and partner experience is the main motto of the TCE Challenge. By decreasing the customer issue response time, we are enabling faster turnaround while enriching the EMC TCE.
Generally there are lot of OPT's before and after a release. Most of the OPT's are raised by the testing team, but once the product is released few OPT's come-in from customer side. On some occasions, we come across duplicate issues. That is when i got this idea that if there is a service that can go through the log files & system metrics and provide the user with fix based on this ES.  Based on user's consent, it searches the local database followed by service repository and provides a possible fix after taking a system back-up.
There are certain Open Source packages like Nagios (Handles Network & system monitoring and notification) & Cacti (For graphing and trending) available, but there is a steep learning curve to set them up and requires a lot of time, resource and expertise. We would also need licenses to use these packages. Henceforth, we needed a proposal that had a tight integration between the field support & sustenance and was specific to EMC products. It should have minimal implementation effort and be a self-learning service that uses lesser system resources. 
Main focus of this idea is to reduce system down-time and update customer on issue’s root cause. 
As per the idea, a log service will be running on the customer system all the time (actively). This will collect errors from the logs (all log files or, product specific directories). Frequent errors are excluded based on the logs and an Error Signature -ES (system metrics – {ram, memory, etc.} + errors + product version) is generated.  For each ES, it would query the database and show up probable root causes if a match is found. Say for instance, you see certain errors when there is limited space on the device. This would create a specific signature, which when picked up by the log service would display an appropriate error.
In case the database has no entry of this ES, it will be sent to the service repository without version info, wherein if its fix is available, a patch will be provided to the customer. When the ES is new, the customer can reach out to CS. 
The repository will then be updated by the ES and its resolution.  List of known issues based on a particular product version will also be accessible.
If the idea is successfully implemented, it would not only increase the customer satisfaction but also decrease the load on CS and engineers.  This would help internal testers in fixing issues seen earlier. 
