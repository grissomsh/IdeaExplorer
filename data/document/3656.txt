Orchestration platform driven by a Directed Acyclic Graph

This idea evolved and was developed as part of an internal initiative to develop an internal Cloud infrastructure for EMSD. It was refined during the design of an asset reservation system that would support orchestrated environments. As part of the process of using domain-type charts for visualizing service orchestrations, it became clear that the existing CMDB solution being used by the team was placing constraints on our ability to model the environment. The existing CMDB was effectively making it technically difficult to create fluid orchestrations because it necessitated translation of the data and domain model.
The team had also learned through experience that customers in effect often want one-off fully orchestrated environments. This drove the design of a platform that would allow customers to present their configuration requirements for orchestration in a manner that closely aligns with the domain model they are already familiar with. 
Investigating execution engines based on Directed Acyclic Graphs then led the team to examine Hadoop-based solutions. We are currently building the solution and have a working version of the architecture supporting several services that being rolled out to early adopters.

Susan Young was an instrumental resource in helping to refine this idea.
Many of the orchestrations that customers want to be able to create against EMC platforms are custom in nature. Custom orchestrations are difficult to create in current orchestration solutions because the interfaces are either inflexible or the user has to be intimate with the API or development environment for the solution to create the orchestration. Many orchestration solutions are designed as configuration management solutions that enforce a specific configuration across many systems, as opposed to meeting the requirement to be able to be able to submit a custom orchestration request through a simplified interface or configuration file.
The solution that is being developed provides the ability to define configurations through a series of YAML files (or a WYSIWIG interface that produces a set of YAML files). This allows the user to leverage their domain knowledge to represent the configuration in a real-world context, without the orchestration requiring them to translate this domain knowledge into a framework-specific interface or language.
In addition, modeling the domain objects in a graph database allows the data to be stored in the same way it was modeled leveraging the same relationship information, providing a rich set of relational data for other solutions such as configuration topology visualizations, utilization reporting, and auditing solutions. 
Using a Directed Acyclic Graph execution engine allows the framework to orchestrate configurations by leveraging the same domain model. This means that orchestration tasks are executed in the context of the same configuration model, facilitating reporting of task status against domain objects in the model, for example. Using Hadoop map functionality for task execution means that the solution is massively scalable.
The entire framework leverages an Enterprise Service Bus event-driven architecture, and is designed around a distributed model, which would allow deployment of the core framework into any data center environment.
Some of the key technologies used in the framework are: Java, Spring, Tomcat/Jetty web servers, Apache Avro, RabbitMQ, Titan, Cassandra, Tinkerpop, Rexster, Faunus, Giraph, and Hadoop.


