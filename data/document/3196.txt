A User-controlled Cloud-based Social Identity Containerization service for privacy-enhanced Social Network interactions

I got this idea, while thinking about what are some of the privacy challenges which people face while interacting with social networks, and how EMC technology can be used to help here. As the reader can guess, this idea is still in the initial stages of definition, and would require industry-wide adoption (possibly via some standardization) to be successful. However, I feel that it presents a unique opportunity for players who want to enhance User privacy to enter the well-dominated social network field. 
Virtualization technology has reached critical mass adoption rates, and has proven itself to be both well-understood and cost-effective means of provably creating barriers between two pieces of process/data programs which need to be kept separate. We propose to leverage this technology as a means to prove to the User, that their Social Identity information is well-contained within such user-controlled, yet 3rd-party-managed virtual environments.
Proposal
1. Public Cloud players (such as AWS, VCHS) define a new User-controlled Identity Containerization service, which allows end-users to register for and enable creation of such Identity Container VMs. Such VMs are owned and controlled on behalf of the Users who have a direct billing relationship (direct or indirect) with the Cloud Players. Alternatively, tech-savvy Users have the option of hosting such VMs on their self-managed infrastructure. 
2. Legacy User service providers (such as Facebook in this e.g. or any similar which aim to provide social network services, but need benefits of this idea) segregate their User-facing functionality/code in such a way that it can be easily deployed on any standard VMs. 
3. When a User wishes to consume the services of site like Facebook, they (via a browser plugin) create a new VM at the Identity Containerization Service Provider and pass on the URL to the service provider (Facebook). Facebook is given sufficient permissions to deploy their User-facing compile code to this VM. 
4. Whenever, User wants to interact with Facebook, they (again with help of a browser plugin) ONLY interact with this specific VM URL. It is expected that any information that Facebook wants to display to the User, is passed on to this VM which further displays it to the User. Since this VM will be running a subset of the Facebook code, the user experience will be very similar as to what the User would get on visiting Facebook's own servers. 
5. Whatever information Facebook wants to collect from the User, will be collected first on this User-controlled VM (since the User will ONLY interact with this VM). From here, Facebook is expected to pull back any information that they want to be stored in their central servers. Since the VM is under the User control, various policies can be set at this egress points as follows
-- a. The User may disable sending any information back to Facebook's servers. 
-- b. The User may choose to enable any additional filtering options (which can be enforced at the Hypervisor layer) to limit what kind of information is sent back to Facebook servers. This will require Facebook to enable the hypervisor to encrypt the egress data, post application of user-defined filtering policies. Since, this communication is between a well-known Cloud player and a well-known service provider (such as Facebook), they need not use user-specific data encryption but trust primarily on their transport level security mechanisms (such as TLS etc). 
6. One important aspect of any social network, is sharing information between friends. Since other friends would also have similar Container VMs, then it is possible to allow any (possibly un-filtered) information exchange with another VM belonging to a friend. The recipient VM (which would know the VM Urls for friends) would willingly accept this information, and the Facebook code running on that VM would display it to the respective VM owner. This has the added advantage that all information which goes between friends is NOT shared with Facebook's central servers. 
7. Since the User's have control over how many VMs they can create and register with their social-network identity, it is possible for them to create multiple VMs so that all their information (though with a single social network identity) is still split across different VMs and is thus manageable (deletable etc) differently.


