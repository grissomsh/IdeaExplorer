Leveraging Pivotal Query Optimizer (PQO) along with Spring XD, HAWQ, Redis & ELK stack
Brazil DC - Pivotal Query Optimizer (PQO) is the industry’s first cost-based query optimizer for big data workloads. PQO was first built for Pivotal HAWQ, and has delivered unparalleled query performance to Pivotal HAWQ. PQO can scale interactive and batch mode analytics to large data sets in the petabytes without degrading query performance and throughput, a task that is prohibitively expensive for traditional EDWs and existing alternatives.

Global Solutions: This proposal suggests a combination of EMC and Federation products designed as EMC Solution that will help our customers to efficiently and effectively apply time-series/machine learning analytics on vast amounts of data.

Egypt COE Challenge: Concept of Smart City and IoT analytical solutions involve time series analysis (e.g. forecast or anomaly detection). We have a reference architecture that is cost effective for massive time-series analytics which is based on existing EMC platforms.
This ideation is an outcome from a brain storming session in EMC IT group.
>> Performance - Our proposal leverages a multi-core scheduler that can distribute individual optimization tasks across multiple cores to speed up the optimization process. This allows the Query Optimizer to apply all possible optimizations as the same time, which results in many more plan alternatives and a wider range of queries that can be optimized. For instance, when the Pivotal Query Optimizer was used with TPC-H Query 21 it generated 1.2 Billion possible plans in 250 ms. This is especially important in Big Data Analytics where performance challenges are magnified by the volume of data that needs to be processed.

>> SubQuery Unnesting - This is probably the most significant enhancement in our ideation, because of the heavy use of subqueries by the major BI/Reporting tools in the industry.  A subquery is a query that is nested inside an outer query block! However, our ideation proposes two main optimizations to handle subqueries - a) Removing Unnecessary Nesting b) Conversion of Subqueries into Joins

>> Saving time upto 50-80% on Data Wrangling activities - Spring XD automates and simplifies this by using a simple DSL (and an upcoming web-based graphical interface) to dynamically build data stream pipelines that are fast, scalable, resilient and extensible.

>> Enables Stream Processing - SpringXD streaming workflows are often made up of continuous ingestion, various types of data wrangling or transformation, advanced analytical processes, and export steps. With timeframes measured in seconds or even milliseconds, companies process streaming information to act on opportunities before they are lost.

>> Seamless Integration with Elasticsearch - Architected to work with Elasticsearch, Kibana gives shape to any kind of data — structured and unstructured — indexed into Elasticsearch. It also benefits from Elasticsearch's powerful search and analytics capabilities.
-- Increasing volume from companies keeping detail data, not aggregates, from many more sources.

-- More variety in the types of data to be incorporated into queries such as application logs, sensor time series, geospatially tagged data, genomics data, and social media feeds.

-- Diverse storage due to an increasing variety of data technologies being instead of traditional RDBMS for storing and managing this data.

-- Complex queries generated by advanced analytics algorithms being applied to all this data.

-- Elasticsearch is API driven. Almost any action can be performed using a simple RESTful API using JSON over HTTP. Client libraries are available for many programming languages. 

-- Schema-Free :: Elasticsearch allows you to get started fast. Simply index a JSON document and it will automatically detect the data structure and types, create an index, and make your data searchable. You also have full control to customize how your data is indexed. 

