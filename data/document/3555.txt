Identification of Underutilized and Non-Productive (Zombie) VMs Using Immune System Principles

I came across this idea some years ago when looking into utilizing various evolutionary computing techniques for analyzing the cloud.  I was a little early in suggesting this originally, as at the time, standing up a cloud was more important than analyzing it.  Recently, it has come to my attention that  the Israel COE's  data science team has done substantial work on analyzing time series for anomalies. As a result I see a lot of synergies with this proposal and believe there is a possibility to extend that work into new directions.  
The idea is to apply artificial immune system algorithms along with signal analysis to these usage metrics in order to classify VMs as either productive or non-productive.  Time series data has a very high dimensionality, and typically transforms, such as discrete Fourier transforms and wavelet transform, with some form filtering can be used to convert temporal information into another, more enlightening form. Determining the resulting distinguishing features to make accurate classification prediction is where clonal selection algorithms, such as AIRS, CLONALG, and BCA enter.   These algorithms were inspired by the immune system response B-cells and T-cells to antigenic stimulus.  They possess two essential features that make them accurate and well-performing practical classifiers: memory and adaptability.  Memory allows one to find solutions rapidly for patterns that have been previously observed (vaccination).  Adaptability enables one to learn new solutions from patterns never seen before (acquired immunity). The algorithms are greedy ones and starting with those in memory, employ selection and cloning for those potential solutions (B-Cells) that have the highest affinity, the closest match, to the provided target pattern.  Diversity is introduced into the population by having the cloned solutions undergo a form of evolution, called somatic hypermutation maturation, a process by which the lowest affinity clones undergo the most mutation.  The highest affinity “matured” solutions are subsequently placed in memory and the process repeats until the stopping criteria are reached.

The system can be taught to identify “idle” VMs by submitting time series metrics from known non-productive and productive VMs.  The training sets can be fashioned according to experimental design (Taguchi) principles, where a factor could be a particular production application. Single factor VMs would contain only one running application; two factor VMs would contain two running applications.  With properly crafted combinations of applications within a VM, one can systematically introduce primary and secondary interactions that will produce metrics to be transformed and digested by the above algorithm. In effect the process builds an empirical classification model over the domain specified in the design. The model can be used for prediction, and, if necessary, dynamically augmented to account for additional applications and interactions as the data center’s mission evolves.  In operational mode, VMs from which one knows nothing about the internal compositions of the running process can be examined by the immune system classifier and judged purely on external observable metrics.


