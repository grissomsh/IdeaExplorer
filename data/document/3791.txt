Improving Load Balancing Process in EMC Recoverpoint 

I came up with the idea during the time spent with a Customer( Baker Botts) to resolve its' Recoverpoint performance issues.
The algorithm we are suggesting is built, tested and implemented in C++. 
My idea is to reduce the rebalancing process execution time in Recoverpoint and achieve  close to optimal balance between the CGs ( Consistency Groups) within the Recoverpoint clusters. 
Recoverpoint is a well-known EMC product used for data replication and DR purposes. In most typical cases we have two site ( one production site and one remote/DR site) and number of Recoverpoint nodes/devices on each site, forming clusters. We can have 2-node configuration, 4-node, 6-node, 8-node etc. Also we have a number of LUNs to be replicated. Those LUNs are grouped in different CGs (consistency groups) which reflect the different types of applications those LUNs are assigned to. LUNs act in sync within their CG, so we can talk about a resultant performance of that CG ( that is the CG’s throughput). Typically we have large number of CGs, distributed along the given number of Recoverpoint nodes. The better distribution we have, the better overall performance we get.
The current rebalancing process used in Recoverpoint is based on exact algorithms and looks like it’s target is no minimize the misbalance between  CGs. The disadvantage of those types of algorithms is that its complexity is not linear. That leads to longer execution time. 
We are suggesting a new heuristic method with implemented algorithm for faster CGs load distribution (Consistency Groups load is actually the CG throughput) among the Recoverpoint nodes. 
So called heuristic methods are used to speed up the process of finding satisfactory solutions, based on an intuitive judgment or common sense. It can be not the optimal solution, but could be the best one for our particular case
The complexity of this new method is linear - O (ms. n). The basic idea of the algorithm is to run as many steps (passing through procedures) as ms (ms is the number of Recoverpoint nodes within a cluster)  and for each step to distribute approximately equal or close to equal load between the nodes. So our goal is not the get necessary the best/optimal balance between the nodes , but the get the fastest balancing process with produces close to optimal balance. Instead of applying 2-3 time current load balancing command during performance issues, we will apply the new method times more many times for the same execution time and we will  get better performance results. 

In computer science load balancing is a technique to spread work evenly between two or more computers, network components, CPUs, hard drives, or, in general, between two or more resources, in order to get optimal resource utilization, maximize throughput, and minimize the response time. 
Let us have certain number of Recoverpoint CGs ( Consistency Groups) n. Let’s have a certain number of Recoverpoint nodes ms in each of the Recoverpoint clusters. So on each of the current nodes we have assigned number of CGs ( Consistency Groups) with current thoughput Lk , whereas  k=1..n. Each Lk  is the throughput  produced from each of the Recoverpoint CGs.  Then {L1, L2, L3… ,Ln} is a set containing all the throughputs in the Recoverpoint cluster. Our goal is to divide this set into ms subsets P1,  P2,… Pms thus that we have from one hand the fastest possible execution time, and from the other hand we get a minimal imbalance between the loads Lp1, Lp2,… Lms.


