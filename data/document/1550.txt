Artificial Intelligence Based Issue Analysis Center
Sometimes due to unclear issue info, the test engineer or operator in manufacturing do not know what’s happing and what they should do in the next step.
Furthermore, for one issue the root cause may be different under different context. It is not an easy task for the developers to foresee all the cases to print out all the 100% correct instruction especially some issues can only be located and root caused based on engineer’s experience.
Recently we involve into the Pass Fail project and one task in this project is to map the original issue to the readable instruction. However, the instruction may not be 100% correct because in different scenario the instruction may be different although the issue description is totally the same. So an idea came to my mind is to develop such AI center to analyze the issues and send back the instruction instead of hard coding the instruction in the software.
Assume there is an AI center to record all the context info of the log and the expected instruction, whenever there is an error triggered, the test engine can input the context info of this error to the AI center and query the most appropriate instruction. If the received instruction is not 100% correct, there is approach provided to the operator to input the context info and expected instruction to the AI center for the rectification.
Therefore, after iterately training the AI center will become more and more intelligent and the instruction send back should approximate to 100% correct. Thus the above two challenges can be addressed.
We have ISearch in Quality Center to query all the issues. But it has following limitation. 1. It cannot return the runtime instruction info to the database. 2. It has no context info recorded so it cannot return the most appropriate instruction based on the context info.
1. The customer can get the accurate instrucion to one issue during test is running. Then the material processing time can be saved because they don't need to investigate what't the next step.
2. Developer do not need to investigate the similar issues which have been looked into before. Then their effort can be tremendous save.
