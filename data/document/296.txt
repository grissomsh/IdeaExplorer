Open Source VPLEX - as a Generic Block Storage Virtualizer that Allows Plugins
This challenge is about "open source".  I believe that making VPLEX an open source product would help both our customers and EMC.  Specifically, since VPLEX is mostly software, we can provide an open source version in which customers, EMC engineers and others provide new capabilities that can be added "in the data path".
I've had the idea for a while. This year at EMC world, EMC has started to support open source.  The VPLEX VP of Engineering (Mark Hadop) has said that he is in favor of open source. The VPLEX organization has not been able to generate new functionality for VPLEX at the rate that we are generating ideas. This approach would leverage the open source community to create new Storage Virtualization features which would be of benefit to everyone. The best ideas would then be productized, i.e. we'd provide service. And we'd fine tune those virtualized services to be at an enterprise level of performance, serviceability, availability, programmability (via REST) and security.
The idea is that we provide a generic framework for creating added services along the IO path.  Interested parties could create add-ons. Everything from deduplicators, improved snaps, other forms of replication, new forms of automated tiering, etc. Having such a generic framework would allow these services to be added to any block storage environment.  Whereas VPLEX today only has a limited set of features, this would allow anybody who wants to, to add new capabilities to a VPLEX like environment. Some features would focus more on performance (such as smarter tiering capabilities) while others would provide other services (such as encryption, deduping, snaps, etc.)

Other ideas would be new. An example is distributing data on demand, so that data could be accessed whereever it is (with high read-write times), but if there is a lot of demand for parts of a LUN, then the LUN would be copied when needed to local storage so as to create higher performance.

Ultimately, such an environment would be perfect for experimentation. The best ideas could then be productized. And as always, once an idea becomes part of VPLEX it would get the EMC level of service.

This would allow VPLEX to keep on adding ideas.
I would define success as having open-sourced VPLEX and having found a "home" for it in the Open Source world. In addition, we'd have documentation that shows how to create virtualized plug-ins for the Virtual Open Source VPLEX. In addition, we'd have at least one new virtualized plug in service that would be written and provide real new value.

This wold increase customer satisfaction, and give more reasons for our customers to purchase the versions of VPLEX that we charge money for.
