SLA - Self Log Analyzer
To take advantage of the growing information gathered on a daily basis for engineering operations, maintenance, and support, [temporal] data mining methods should be considered. To maintain the whole process end-to-end, logs data can provide a good reflection of the system's process and state.
Previously, as part of my formal M.Sc. education I have researched the applications of temporal data mining (TDM) for the analysis of clinical data. The huge and complicated time-oriented logs in replication team at RecoverPoint, caused me to think that TDM can help. Exploring the exact uses and processes in replication and RecoverPoint, has proved that it matches the pre-requirement to use such methods (mentioned in the solution). Discussing the idea with Yoval Nir, Oshry Ben-Harush, and Alon Grubshtein strengthen its implications, real need and its usability.
Useful knowledge hidden in the huge, redundant (and in most cases unfriendly for DEV and QA) time-oriented data is difficult to discover by human inspection, but it is easier for machine learning algorithms. Using the fact that there is a small number of users in the system and that the logs are structured (machine-generated), we can represent the main good flows of the system (temporal patterns), detect deviations from these flows, and use these valuable information for reporting and monitoring. As opposed to existing log analyzers, which are mostly static, rely on some simple statistics or white/black list, this method is adaptive to the current processes and maintainable. The solution composed of several steps: the extraction of the temporal patterns (Abstraction of the temporal variables can be a pre-processing step), selecting the "interesting" flows (unsupervised), and then building classification models (i.e., random forest) for future data.
The implementation of the SLA idea will provide a useful tool for RecoverPoint QA, KATE (automation),  and DEV teams. The tool might be a simple background process, or a visual tool, providing the necessary information for faster code and bugs analysis of the invoked process. The SLA can save company's money by saving QA and DEV time and enhance their productivity. Overall, it can improve the process of understanding the good flows, and improve debugging.
